# .github/workflows/build-publish.yml
name: CI-CD Pipeline for Docker Image

on:
  # Trigger the workflow on pull requests targeting the main branch
  pull_request:
    branches: [ "main" ]
  # Also trigger on pushes to the main branch (after a PR is merged)
  push:
    branches: [ "main" ]

env:
  # Optional repo-level variable (Settings → Variables → Actions → Repository variables)
  # If not set, we’ll fall back to the repository name (lowercased, slashes -> dashes)
  IMAGE_NAME_VAR: ${{ vars.IMAGE_NAME }}

jobs:
  # JOB 1: Build the image and run a basic test
  # This job runs on every PR to ensure the image builds successfully.
  build-and-test:
    name: Build & Test (Devcontainer w/ Features)
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME_VAR: ${{ vars.IMAGE_NAME }}
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine image name
        id: vars
        run: |
          DEFAULT_NAME="$(echo "${GITHUB_REPOSITORY#*/}" | tr '[:upper:]/_' '[:lower:]-')"
          IMAGE_NAME="${IMAGE_NAME_VAR:-$DEFAULT_NAME}"
          echo "image=${IMAGE_NAME}" >> "$GITHUB_OUTPUT"

      # initializeCommand needs the 1Password CLI on the HOST (runner)
      - name: Install 1Password CLI on runner
        run: |
          set -eux
          sudo mkdir -p /usr/share/keyrings
          curl -sS https://downloads.1password.com/linux/keys/1password.asc \
            | gpg --dearmor | sudo tee /usr/share/keyrings/1password-archive-keyring.gpg >/dev/null
          echo "deb [signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] \
            https://downloads.1password.com/linux/debian/$(dpkg --print-architecture) stable main" \
            | sudo tee /etc/apt/sources.list.d/1password.list
          sudo apt-get update
          sudo apt-get install -y 1password-cli

      # Build the devcontainer (Features applied) and run tests INSIDE it
      - name: Build & run devcontainer
        uses: devcontainers/ci@v0.3
        with:
          imageName: localbuild/${{ steps.vars.outputs.image }}:pr-${{ github.event.number }}
          runCmd: |
            set -eux
            # sanity: tools from Dockerfile
            kubectl version --client
            terraform -version
            # python via Feature + pip tooling via postCreate
            python --version
            ansible --version
            ansible-lint --version
            # OpenStack auth (env comes from initializeCommand -> env file)
            openstack token issue >/dev/null
            echo "Devcontainer smoke tests OK"

  # JOB 2: Run Trivy vulnerability scan
  # This job depends on the build succeeding and runs on every PR.
  trivy-scan:
    name: Trivy Scan (PR)
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v4
      - name: Determine image name
        id: vars
        run: |
          DEFAULT_NAME="$(echo "${GITHUB_REPOSITORY#*/}" | tr '[:upper:]/_' '[:lower:]-')"
          IMAGE_NAME="${IMAGE_NAME_VAR:-$DEFAULT_NAME}"
          echo "image=${IMAGE_NAME}" >> "$GITHUB_OUTPUT"
      - name: Build image (amd64, load locally)
        uses: docker/build-push-action@v6
        with:
          context: .
          # We don't push here, just load it into the runner's docker instance
          load: true
          platforms: linux/amd64
          # We'll tag it with the PR number for easy reference
          tags: localbuild/${{ steps.vars.outputs.image }}:pr-${{ github.event.number }}

      - name: Trivy
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: localbuild/${{ steps.vars.outputs.image }}:pr-${{ github.event.number }}
          format: table
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL'


  # JOB 3: Run Snyk vulnerability scan
  # This job also depends on the build succeeding and runs on every PR.
  snyk-scan:
    name: Snyk Scan (PR)
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v4
      - name: Determine image name
        id: vars
        run: |
          DEFAULT_NAME="$(echo "${GITHUB_REPOSITORY#*/}" | tr '[:upper:]/_' '[:lower:]-')"
          IMAGE_NAME="${IMAGE_NAME_VAR:-$DEFAULT_NAME}"
          echo "image=${IMAGE_NAME}" >> "$GITHUB_OUTPUT"
      - name: Build image (amd64, load locally)
        uses: docker/build-push-action@v6
        with:
          context: .
          # We don't push here, just load it into the runner's docker instance
          load: true
          platforms: linux/amd64
          # We'll tag it with the PR number for easy reference
          tags: localbuild/${{ steps.vars.outputs.image }}:pr-${{ github.event.number }}

      - name: Snyk container scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: localbuild/${{ steps.vars.outputs.image }}:pr-${{ github.event.number }}
          args: --severity-threshold=critical

  # JOB 4: Publish the image to GHCR
  # This job ONLY runs when a PR is merged into the 'main' branch.
  publish:
    name: Publish (multi-arch + SBOM + signing)
    runs-on: ubuntu-latest
    # This job requires all previous jobs to succeed
    needs: [build-and-test, trivy-scan, snyk-scan]
    # This condition ensures the job only runs on a push event to the main branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Determine image name
        id: vars
        run: |
          DEFAULT_NAME="$(echo "${GITHUB_REPOSITORY#*/}" | tr '[:upper:]/_' '[:lower:]-')"
          IMAGE_NAME="${IMAGE_NAME_VAR:-$DEFAULT_NAME}"
          echo "image=${IMAGE_NAME}" >> "$GITHUB_OUTPUT"

      - name: Docker meta (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
          labels: |
            org.opencontainers.image.title=${{ steps.vars.outputs.image }}
            org.opencontainers.image.description=Dev container image
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push (multi-arch, SBOM + provenance)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          sbom: true
          provenance: true

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign pushed image (keyless, OIDC)
        env:
          COSIGN_EXPERIMENTAL: "false"
        run: |
          set -eux
          DIGEST="${{ steps.build.outputs.digest }}"
          IMAGE="ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.image }}"
          cosign sign --yes "${IMAGE}@${DIGEST}"